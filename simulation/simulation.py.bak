"""
Module for simulating V2V and V2I communications in a VRU signalization system.
"""
import multiprocessing as mp
from typing import List, Dict, Tuple, Opt                for sender in v2v_users:
                    if sender.user_id != receiver.user_id:
                        sender.protocol = protocole
                        receiver.protocol = protocole
                        sender.send_message(receiver, size=1)
                sender.process_messages(user_dict, metric)import pandas as pd
import csv
from concurrent.futures import ProcessPoolExecutor, TimeoutError
import numpy as np
from tqdm import tqdm
import logging
from dataclasses import dataclass
from pathlib import Path

from simulation.models import User, Infrastructure, Node
from simulation.protocols import Protocole
from simulation.metric import Metric

logger = logging.getLogger(__name__)

@dataclass
class SimulationConfig:
    """Configuration for the simulation parameters."""
    v2v_network_load: float = 0.1
    v2v_packet_loss: float = 0.1
    v2v_transmission_time: float = 0.1
    v2i_network_load: float = 0.1
    v2i_packet_loss: float = 0.05
    v2i_transmission_time: float = 0.5
    csv_output: str = 'resultats.csv'
    trace_file: str = 'sumoTrace_edge.csv'

class SimulationError(Exception):
    """Base exception for simulation errors."""
    pass

class NoUsersError(SimulationError):
    """Raised when there are not enough users for communication."""
    pass

class NoInfrastructureError(SimulationError):
    """Raised when there is no infrastructure available for V2I."""
    pass

def charger_usagers_depuis_csv(fichier_csv: str) -> List[Node]:
    """Load users from CSV file with improved error handling."""
    logger.info(f"Loading users from CSV: {fichier_csv}")
    try:
        if not Path(fichier_csv).exists():
            raise FileNotFoundError(f"CSV file not found: {fichier_csv}")
            
        df = pd.read_csv(fichier_csv)
        usagers: List[Node] = []
        for _, row in df.iterrows():
            t = row['_time']

            # Container treated as Infrastructure
            if pd.notna(row.get('container/_id')):
                proto = Protocole("V2I", network_load=0.1, packet_loss_rate=0.05, transmission_time=0.5)
                infra = Infrastructure(
                    id=row['container/_id'],
                    protocol=proto,
                    x=row['container/_x'],
                    y=row['container/_y'],
                    processing_capacity=100,
                    time=t
                )
                usagers.append(infra)

            # All persons treated as Users (regardless of index)
            for key in row.keys():
                if key.startswith("person/") and key.endswith("/_id"):
                    prefix = key[:-len("/_id")]
                    if pd.notna(row.get(key)):
                        user = User(
                            usager_id=row[key],
                            x=row.get(f"{prefix}/_x"),
                            y=row.get(f"{prefix}/_y"),
                            angle=row.get(f"{prefix}/_angle"),
                            speed=row.get(f"{prefix}/_speed"),
                            position=row.get(f"{prefix}/_pos"),
                            lane=row.get(f"{prefix}/_edge"),
                            time=t,
                            usager_type=row.get(f"{prefix}/_type"),
                            categorie="vru"
                        )
                        usagers.append(user)

            # Vehicles as before
            i = 0
            while f"vehicle/{i}/_id" in row:
                vid = row[f"vehicle/{i}/_id"]
                if pd.notna(vid):
                    usager = User(
                        usager_id=vid,
                        x=row[f"vehicle/{i}/_x"],
                        y=row[f"vehicle/{i}/_y"],
                        angle=row[f"vehicle/{i}/_angle"],
                        speed=row[f"vehicle/{i}/_speed"],
                        lane=row[f"vehicle/{i}/_lane"],
                        position=row[f"vehicle/{i}/_pos"],
                        time=t,
                        usager_type=row[f"vehicle/{i}/_type"],
                        categorie="vehicule"
                    )
                    usagers.append(usager)
                i += 1
        logger.info(f"{len(usagers)} users loaded")
        return usagers
    except Exception as e:
        logger.error(f"Error loading users from CSV: {str(e)}")
        raise

def regrouper_par_temps(usagers: List[Node]) -> Dict[float, List[Node]]:
    print("[Étape] Regroupement des usagers par temps")
    result: Dict[float, List[Node]] = {}
    for u in usagers:
        result.setdefault(u.time, []).append(u)
    return result

def simuler_communication(users: List[Node], protocole: Protocole, metric: Metric, mode: str = "v2v") -> Metric:
    """
    Simule la communication entre les nœuds selon le mode spécifié.
    
    Args:
        users: Liste des nœuds participants
        protocole: Protocole de communication à utiliser
        metric: Objet pour collecter les métriques
        mode: Mode de communication ("v2v" ou "v2i")
        
    Returns:
        Metric: Métriques collectées pendant la simulation
        
    Raises:
        ValueError: Si les paramètres sont invalides
    """
    if not users:
        raise NoUsersError("La liste des utilisateurs ne peut pas être vide")
    
    if not protocole:
        raise ValueError("Le protocole ne peut pas être None")
        
    if mode not in ["v2v", "v2i"]:
        raise ValueError("Mode invalide. Utilisez 'v2v' ou 'v2i'")
    
    print(f"[Étape] Simulation de communication (mode = {mode})")
    
    if mode == "v2v":
        v2v_users = [u for u in users if isinstance(u, User)]
        if len(v2v_users) <= 1:
            print("Warning: Pas assez d'utilisateurs pour la communication V2V")
            return metric
            
        # Fix: use user_id instead of user.user_id
        user_dict = {u.user_id: u for u in v2v_users}
        
        try:
            for sender in v2v_users:
                for receiver in v2v_users:
                    if sender.user_id != receiver.user_id:
                        sender.protocol = protocole
                        receiver.protocol = protocole
                        sender.send_message(receiver, size=1)
                sender.process_messages(user_dict, metric)
        except Exception as e:
            print(f"Erreur lors de la simulation V2V: {str(e)}")
            raise

    elif mode == "v2i":
        infra_nodes = [u for u in users if isinstance(u, Infrastructure)]
        normal_users = [u for u in users if isinstance(u, User)]
        
        if len(normal_users) <= 1:
            print("Warning: Pas assez d'utilisateurs pour la communication V2I")
            return metric
            
        if not infra_nodes:
            print("Warning: Aucune infrastructure disponible pour la communication V2I")
            return metric
            
        try:
            for u in normal_users:
                for v in normal_users:
                    if u.user_id != v.user_id:
                        for infra in infra_nodes:
                            u.protocol = protocole
                            infra.protocol = protocole
                            v.protocol = protocole
                            u.send_message(infra, size=1)
                            infra.process_messages({infra.user_id: infra}, metric)
                            infra.send_message(v, size=1)
                            infra.process_messages({v.user_id: v}, metric)
        except Exception as e:
            print(f"Erreur lors de la simulation V2I: {str(e)}")
            raise
            
    return metric

def simulate_batch(args: Tuple[List[Node], Protocole, str]) -> Tuple[str, Tuple[float, float, float]]:
    """
    Simulate a single batch of communication.
    """
    try:
        users, protocol, mode = args
        metric = Metric()
        users_copy = []

        # Deep copy users to avoid shared state issues
        for user in users:
            try:
                # Get all attributes with validation before creating new objects
                attrs = {}
                if isinstance(user, (User, Infrastructure)):
                    attrs['x'] = float(getattr(user, 'x', 0.0))
                    attrs['y'] = float(getattr(user, 'y', 0.0))
                    attrs['user_id'] = str(getattr(user, 'user_id', f"user_{id(user)}"))
                    attrs['time'] = float(getattr(user, 'time', 0.0))

                if isinstance(user, User):
                    new_user = User(
                        usager_id=attrs['user_id'],
                        x=attrs['x'],
                        y=attrs['y'],
                        angle=float(getattr(user, 'angle', 0.0)),
                        speed=float(getattr(user, 'speed', 0.0)),
                        position=float(getattr(user, 'position', 0.0)),
                        lane=str(getattr(user, 'lane', '')),
                        time=attrs['time'],
                        usager_type=str(getattr(user, 'usager_type', 'DEFAULT')),
                        categorie=str(getattr(user, 'categorie', 'vru'))
                    )
                    new_user.protocol = protocol
                elif isinstance(user, Infrastructure):
                    new_user = Infrastructure(
                        id=attrs['user_id'],
                        protocol=protocol,
                        x=attrs['x'],
                        y=attrs['y'],
                        processing_capacity=int(getattr(user, 'processing_capacity', 100)),
                        time=attrs['time']
                    )
                else:
                    logger.warning(f"Unknown user type: {type(user).__name__}")
                    continue

                users_copy.append(new_user)
                logger.debug(f"Successfully copied {type(user).__name__} with id {new_user.user_id}")

            except (AttributeError, ValueError, TypeError) as e:
                logger.error(f"Error copying {type(user).__name__}: {str(e)}")
                continue
            except Exception as e:
                logger.error(f"Unexpected error copying {type(user).__name__}: {str(e)}")
                continue

        if not users_copy:
            logger.error("No users were successfully copied")
            return protocol.name, (None, None, None)

        # Run simulation with copied objects
        metric = simuler_communication(users_copy, protocol, metric, mode)
        return protocol.name, metric.get_metrics()
        
    except Exception as e:
        logger.error(f"Batch simulation error: {str(e)}")
        return protocol.name, (None, None, None)

def main(config: Optional[SimulationConfig] = None) -> bool:
    """
    Main simulation function with improved error handling and configuration.
    
    Args:
        config: Optional simulation configuration. If None, uses defaults.
        
    Returns:
        bool: True if simulation succeeded, False otherwise
    """
    if config is None:
        config = SimulationConfig()
        
    logger.info("Starting simulation")
    failed_times: List[float] = []
    
    try:
        # Initialize progress bars
        with tqdm(total=4, desc="Overall progress", position=0) as pbar_main:
            # Load users with progress
            logger.info("Loading users from CSV")
            pbar_main.set_description("Loading users")
            users = charger_usagers_depuis_csv(config.trace_file)
            if not users:
                raise NoUsersError("No users loaded from CSV")
            logger.info(f"Loaded {len(users)} users")
            pbar_main.update(1)
            
            # Group users by time
            pbar_main.set_description("Temporal grouping")
            groups = regrouper_par_temps(users)
            logger.info(f"Created {len(groups)} temporal groups")
            pbar_main.update(1)

            # Initialize protocols
            protocole_v2v = Protocole(
                "V2V",
                network_load=config.v2v_network_load,
                packet_loss_rate=config.v2v_packet_loss,
                transmission_time=config.v2v_transmission_time
            )
            protocole_v2i = Protocole(
                "V2I",
                network_load=config.v2i_network_load,
                packet_loss_rate=config.v2i_packet_loss,
                transmission_time=config.v2i_transmission_time
            )

            # Use optimal number of workers
            n_workers = max(1, mp.cpu_count() - 1)
            logger.info(f"Using {n_workers} processes for simulation")

            # Run simulation with proper resource management
            with open(config.csv_output, 'w', newline='') as csvfile, \
                 ProcessPoolExecutor(max_workers=n_workers) as executor:
                
                writer = csv.writer(csvfile)
                writer.writerow([
                    "Time",
                    "Protocol",
                    "Average Delay (s)",
                    "Loss Rate (%)",
                    "Average Load"
                ])
                
                pbar_main.set_description("Simulating communications")
                with tqdm(total=len(groups),
                         desc="Temporal progress",
                         position=1) as pbar_time:
                    
                    for t, batch in groups.items():
                        tasks = [
                            (batch, protocole_v2v, "v2v"),
                            (batch, protocole_v2i, "v2i")
                        ]
                        
                        try:
                            # Prepare simulation tasks
                            futures = [executor.submit(simulate_batch, task) for task in tasks]
                            results = []
                            
                            # Wait for all tasks with timeout
                            for future in futures:
                                try:
                                    result = future.result(timeout=30)  # 30 seconds timeout
                                    results.append(result)
                                except TimeoutError:
                                    logger.error(f"Timeout at t={t}")
                                    failed_times.append(t)
                                    continue
                            
                            # Process results
                            for protocol_name, metrics in results:
                                avg, loss, load = metrics
                                if avg is None:
                                    failed_times.append(t)
                                    continue
                                    
                                writer.writerow([
                                    t,
                                    protocol_name,
                                    round(avg, 4) if avg is not None else "N/A",
                                    round(loss * 100, 2) if loss is not None else "N/A",
                                    round(load, 4) if load is not None else "N/A",
                                ])
                                
                        except Exception as e:
                            logger.error(f"Error at t={t}: {str(e)}")
                            failed_times.append(t)
                            continue
                    
                    pbar_time.close()
                
                pbar_main.update(1)
            
            # Final update
            pbar_main.set_description("Simulation completed")
            pbar_main.update(1)
            pbar_main.close()
            
            if failed_times:
                logger.warning(
                    f"Times with failed communications: {failed_times}"
                )
            else:
                logger.info("All communications successful")
                
            return len(failed_times) < len(groups)
            
    except Exception as e:
        logger.error(f"Critical simulation error: {str(e)}")
        return False

def process_simulation_results(
    results: List[Tuple[str, Tuple[float, float, float]]],
    time: float,
    writer: csv.writer,
    failed_times: List[float]
) -> None:
    """Process and write simulation results."""
    for protocol_name, metrics in results:
        avg, loss, load = metrics
        if avg is None:
            failed_times.append(time)
            continue
            
        writer.writerow([
            time,
            protocol_name,
            round(avg, 4) if avg is not None else "N/A",
            round(loss * 100, 2) if loss is not None else "N/A",
            round(load, 4) if load is not None else "N/A",
        ])
